name: CI

on:
  push:
    branches: [main]
    tags: ['*']
  pull_request:

jobs:

  ci:
    name: Build and test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare local toolchain
        run: |
          rustup component add clippy
          cargo --version --verbose
          rustc --version
          cargo clippy --version

      - name: Check for changes
        run: git diff --exit-code

      - name: Format
        run: cargo fmt -- --check

      - name: Check
        run: cargo check

      - name: Lint
        run: cargo clippy -- -D warnings

      - name: Test
        run: cargo test --all

      - name: Build
        run: cargo build --release

      - name: Debug
        run: echo "${{ github.ref }}"


  release:
    name: Tag if version bumped
    needs: ci
    runs-on: ubuntu-latest

    # Pushed or merged to `main`
    if: ${{ github.ref == 'refs/heads/main' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Debug
        run: echo "${{ github.ref }}"

      - name: Prepare toolchain
        run: |
          cargo install cargo-get
          cargo --version --verbose
          rustc --version
          cargo get --version

      - name: Get versions
        id: versions
        run: |
          git log --all --decorate --oneline --graph
          prev="$(git describe --tags --abbrev=0)"
          next="$(cargo get workspace.package.version)"
          echo "Versions: prev='$prev', next='$next'"
          if [[ -z "$prev" ]] || [[ -z "$next" ]] then
            echo "Failed to get the versions"
            exit 1
          fi
          echo "prev=$prev\n" >> "$GITHUB_OUTPUT"
          echo "next=$next\n" >> "$GITHUB_OUTPUT"

      - name: Create tag if version bumped
        if: ${{ steps.versions.outputs.prev != format('v{0}', steps.versions.outputs.next) }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ steps.versions.outputs.next }} \
              --notes "Release ${{ steps.versions.outputs.next }}"
